package com.nelkinda.rel

import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertFalse
import org.junit.jupiter.api.Assertions.assertNotEquals
import org.junit.jupiter.api.Assertions.assertNotNull
import org.junit.jupiter.api.Assertions.assertTrue
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertThrows
import java.nio.file.Paths
import java.time.Duration
import java.time.Instant
import java.time.LocalDate
import kotlin.io.path.extension

class KotlinExpressionCompilerTest {
    private val compiler = KotlinExpressionCompiler(createOutputDirectory())

    private fun createOutputDirectory() = Paths.get("/tmp").toFile()

    @Test
    fun createCode() {
        val expression = "6 * value"
        val className = compiler.autoGeneratedClassName(expression, Int::class, Int::class)
        val expectedCode =
            """
            import com.nelkinda.rel.Function

            class $className : Function<Int, Int> {
                override fun apply(value: Int): Int =
                    $expression
            }
            """.trimIndent()
        val actualCode = compiler.generateExpressionSourceCode(expression, className, Int::class, Int::class)
        assertEquals(expectedCode, actualCode)
    }

    @Test
    fun compileCode2() {
        val instance = compiler.compile("6 * value", Int::class, Int::class)
        val start = Instant.now()
        repeat(10000000) { assertEquals(42, instance.apply(7)) }
        val end = Instant.now()
        val duration = Duration.between(start, end)
        println(duration)
    }

    @Test
    fun verifyFileSuffix() {
        val file =
            compiler
                .createSourceFile(
                    "6 * value",
                    "CLASS2924D9C58D1F4D4200B7F03059F812EC4DB36A24DB1C835ADF73861CCD9495CA",
                    Int::class,
                    Int::class,
                )
        assertEquals("kt", file.extension)
    }

    @Test
    fun givenTwoEqualExpressions_whenGeneratingTheAutoGeneratedClassName_thenReturnsTheSameName() {
        val expression1 = "6 * value"
        val expression2 = "6 * value"
        assertEquals(
            compiler.autoGeneratedClassName(expression1, Int::class, Int::class),
            compiler.autoGeneratedClassName(expression2, Int::class, Int::class)
        )
    }

    @Test
    fun givenAnExpression_whenGeneratingTheAutoGeneratedClassNameForSameDataTypes_thenReturnsSameName() {
        val expression = "6 * value"
        assertEquals(
            compiler.autoGeneratedClassName(expression, Int::class, Int::class),
            compiler.autoGeneratedClassName(expression, Int::class, Int::class)
        )
    }

    @Test
    fun givenAnExpression_whenGeneratingTheAutoGeneratedClassNameForDifferentDataTypes_thenReturnsDifferentName() {
        val expression = "6 * value"
        assertNotEquals(
            compiler.autoGeneratedClassName(expression, Int::class, Float::class),
            compiler.autoGeneratedClassName(expression, Float::class, Int::class)
        )
    }

    @Test
    fun givenAnExpression_whenGeneratingTheAutoGeneratedClassNameForDifferentIntDataTypes_thenReturnsDifferentName() {
        val expression = "6 * value"
        assertNotEquals(
            compiler.autoGeneratedClassName(expression, Int::class, UInt::class),
            compiler.autoGeneratedClassName(expression, UInt::class, Int::class)
        )
    }

    @Test
    fun givenToDifferentExpressions_whenGeneratingTheAutoGeneratedClassName_thenReturnsDifferentName() {
        val expression1 = "6 * value"
        val expression2 = "value * 6"
        assertNotEquals(
            compiler.autoGeneratedClassName(expression1, Int::class, Int::class),
            compiler.autoGeneratedClassName(expression2, Int::class, Int::class)
        )
    }

    @Test
    fun testKotlinExpressionCompiler() {
        val instance = compiler.compile("6 * value", Int::class, Int::class)
        val start = Instant.now()
        repeat(10000000) { assertEquals(42, instance.apply(7)) }
        val end = Instant.now()
        val duration = Duration.between(start, end)
        println(duration)
    }

    @Test
    fun testBooleanOutput() {
        val instance = compiler.compile("value != 0", Int::class, Boolean::class)
        assertTrue(instance.apply(1))
        assertFalse(instance.apply(0))
    }

    @Test
    fun testHexConversion() {
        val instance = compiler.compile("String.format(\"0x%02X\", value.toByte())", UByte::class, String::class)
        assertEquals("0x7F", instance.apply(127.toUByte()))
    }

    @Test
    fun testCompilationFailure() {
        val exception = assertThrows<CompilationErrorException> {
            compiler.compile("thisVariableDoesNotExist", Int::class, Int::class)
        }
        val message = exception.message
        assertNotNull(message)
        // The line number (5) may change if we add imports or otherwise reformat the file.
        assertTrue(message!!.contains(Regex("\\.kt:5:9: error: unresolved reference: thisVariableDoesNotExist")))
    }

    @ExperimentalUnsignedTypes
    @Test
    fun testCompilationByName() {
        val instance = compiler.compile<Int, Boolean>("value != 0", "Int", "Boolean")
        assertTrue(instance.apply(1))
        assertFalse(instance.apply(0))
    }

    @ExperimentalUnsignedTypes
    @Test
    fun testGetKClass() {
        assertEquals(Boolean::class, getKClass("Boolean"))
        assertEquals(Byte::class, getKClass("Byte"))
        assertEquals(UByte::class, getKClass("UByte"))
        assertEquals(Short::class, getKClass("Short"))
        assertEquals(UShort::class, getKClass("UShort"))
        assertEquals(Int::class, getKClass("Int"))
        assertEquals(UInt::class, getKClass("UInt"))
        assertEquals(Long::class, getKClass("Long"))
        assertEquals(ULong::class, getKClass("ULong"))
        assertEquals(Float::class, getKClass("Float"))
        assertEquals(Double::class, getKClass("Double"))
        assertEquals(String::class, getKClass("String"))
        assertEquals(ByteArray::class, getKClass("ByteArray"))
        assertEquals(UByteArray::class, getKClass("UByteArray"))
        assertEquals(LocalDate::class, getKClass("java.time.LocalDate"))
    }
}
